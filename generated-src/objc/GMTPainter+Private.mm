// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gmocktest.djinni

#import "GMTPainter+Private.h"
#import "GMTPainter.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GMTPainter+Private.h"
#import "GMTTurtle+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GMTPainter ()

- (id)initWithCpp:(const std::shared_ptr<::gmocktest::Painter>&)cppRef;

@end

@implementation GMTPainter {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gmocktest::Painter>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gmocktest::Painter>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GMTPainter *)createWithTurtle:(nullable GMTTurtle *)turtle {
    try {
        auto r = ::gmocktest::Painter::create_with_turtle(::djinni_generated::Turtle::toCpp(turtle));
        return ::djinni_generated::Painter::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)drawCircle:(int32_t)x
                 y:(int32_t)y
            radius:(int32_t)radius {
    try {
        auto r = _cppRefHandle.get()->draw_circle(::djinni::I32::toCpp(x),
                                                  ::djinni::I32::toCpp(y),
                                                  ::djinni::I32::toCpp(radius));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Painter::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Painter::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GMTPainter>(cpp);
}

}  // namespace djinni_generated

@end
