// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gmocktest.djinni

#include "NativeTurtle.hpp"  // my header
#include "NativeTurtle.hpp"

namespace djinni_generated {

NativeTurtle::NativeTurtle() : ::djinni::JniInterface<::gmocktest::Turtle, NativeTurtle>("com/mycompany/gmocktest/Turtle$CppProxy") {}

NativeTurtle::~NativeTurtle() = default;


CJNIEXPORT void JNICALL Java_com_mycompany_gmocktest_Turtle_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::gmocktest::Turtle>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_mycompany_gmocktest_Turtle_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::gmocktest::Turtle::create();
        return ::djinni::release(::djinni_generated::NativeTurtle::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_mycompany_gmocktest_Turtle_00024CppProxy_native_1penDown(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gmocktest::Turtle>(nativeRef);
        ref->pen_down();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
